   大部分GDB内的命令都可以仅输入前几个字符，只要不与其它指令冲突。如quit可以简写为q，因为以q打头的命令只有quit。 List可以简写为l，等等。
   gdb的一些常用指令：
1、启动GDB
   你可以输入GDB来启动GDB程序。GDB 程序有许多参数，在此没有必要详细介绍，但一个最为常用的还是要介绍的：如果你已经编译好一个程序，我们假设文件名为hello，你想用GDB调试它，可 以输入gdb hello来启动GDB并载入你的程序。如果你仅仅启动了GDB，你必须在启动后，在GDB中再载入你的程序。
   载入程序 === file
 在GDB内，载入程序很简单，使用file命令。如file hello。当然，程序的路径名要正确。
2、list  (l)

   列出10行源程序 === list 
   列出某个函数的10行命令:  list FUNCTION
   以当前源文件的某行为中间显示10行源程序:  list LINENUM
   接着前一次继续显示下10行:  list(或按enter重复执行上一次的指令）
   显示前一次之前的源程序:  list -
   显示另一个文件的一段程序:  list FILENAME:FUNCTION 或 list FILENAME:LINENUM
3、start

  - 开始调试,并且自动在main开始处中断
   使程序停在main函数的第一行
4、运行程序 === run (r)

   程序开始运行，直到遇到断点
5、step   - 执行下一步语句,如果有函数就跳进去继续执行
   next   - 执行下一步语句,不会跳入函数，直接把函数作为一步跳过去
6、finish （没有简写）
       ===退出函数
       如果已经进入了某函数，而想退出该函数返回到它的调用函数中，可使用命令finish
   在函数内部时，直接跳出该函数，返回到调用该函数的下一步
   （运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。）
7、查看程序信息 === info

    查看断点信息i b  (info break)： 用这条指令，你可以得到你所设置的所有断点的详细信息。包括断点号，类型，状态，内存地址，断点在源程序中的位置等。
    查看当前局部变量的值i loc  (info local) 
8、调试递归函数bt (backtrace): 显示当前的函数调用栈的所有信息。
9、frame 或 f：查看当前栈层的信息，会打印出这些信息：栈的层编号，当前的函数名，函数参数值，函数所在文件及行号，函数执行到的语句
   f num  显示序列号为num的栈信息
10、p (print)  功能一：打印某一变量或表达式的值  如p n --打印当前变量n的值 ；p n+5 --打印表达式n+5的值
      功能二：给当前运行的某变量赋值（用于查看某一变量为不同值时运行的结果有何不同）   如p  n=5 --赋值此时n变为5
11、修改变量值set varible

   在调试程序时，若想改变一个变量的值，看看在这种情况下会发生什么。用set指令可以修改变量的值：set varible=value
例如你想将一个变量tmp的值赋为10，set tmp=10
12、display [变量名]   - 监控指定变量值,每次执行s,n或者c之后会显示
                       (每次运行到断点就显示变量的值，用于观察变量的变化)

   undisplay 序号    取消打印某个序号变量的值 
13、breakpoint 断点
    break FUNCTION 　在某个函数上设置断点。
    break LINENUM　　在行号为LINENUM的行上设置断点
    break FILENAME:LINENUM    在文件名为FILENAME的原文件的第LINENUM行设置断点
    break FILENAME:FUNCTION   在文件名为FILENAME的FUNCTION函数上设置断点
    break ... if COND  这个命令设置一个条件断点，条件由COND指定；在gdb每次执行到此断点时COND都被计算当COND的值为    非零时，程序在断点处停止
    查看断点列表i b (info break)
    delete 断点序号   --取消该断点
    clear 文件名：行号 或者  clear 函数名  --取消断点
    delete、clear后面不加任何参数表示删除所有活跃的断点
    dis 序号  --把指定断点序号变为不活跃（disable)
    ena 序号  --把制定断点序号变为活跃(enable)

14、c (continue)   恢复程序运行，直到遇到下一个断点(继续运行被断点中断的程序）
